//------------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
import React, { useContext } from "react"; 
import { Navigate } from "react-router-dom"; 
import { AuthContext } from "../context/AuthContext.jsx";
//------------------------------------------------------------------------------------------------------------------------

const ProtectedRoute = ({ children, allowedRoles }) => {
    // Accessing token and role from the auth context
    const { token, role } = useContext(AuthContext);
    // ---------------------------------------------------------------------------------------------------------------------
    // Checking if the user's role is allowed to access the route
    const isAllowed = allowedRoles.includes(role);
    // ---------------------------------------------------------------------------------------------------------------------
    // Determine the accessible route based on token and allowed role
    const accessibleRoute = token && isAllowed ? children : <Navigate to='/login' replace={true} />;
    // ---------------------------------------------------------------------------------------------------------------------
    // Returning the accessible route
    return accessibleRoute;
    // ---------------------------------------------------------------------------------------------------------------------
};
// ---------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------
export default ProtectedRoute; // ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
